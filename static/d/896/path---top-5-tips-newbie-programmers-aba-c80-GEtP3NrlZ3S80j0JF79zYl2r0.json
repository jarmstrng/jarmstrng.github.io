{"data":{"wordpressPost":{"id":"d0e64748-5bd6-5201-935e-eea31e239f45","title":"Top 5 Tips for Newbie Programmers","slug":"top-5-tips-newbie-programmers","content":"<blockquote><p>&#8220;Failure is the opportunity to begin again more intelligently&#8221;<br />\n&#8211; (probably) Henry Ford</p></blockquote>\n<p>What an ominous way to start a blog post, talking about failure!</p>\n<p>But let&#8217;s be real: &#8220;<strong>Understand and accept that you will make mistakes&#8221;</strong> is the <a title=\"Dad and the Ten Commandments of Egoless Programming\" href=\"http://blog.stephenwyattbush.com/2012/04/07/dad-and-the-ten-commandments-of-egoless-programming\" target=\"_blank\">First Commandment of Egoless Programming</a> for a reason.</p>\n<p>You will make mistakes.</p>\n<p>And you know what? That&#8217;s cool. Because the second commandment is &#8220;<strong>You are not your code</strong>.&#8221;</p>\n<p>I&#8217;ve been helping beginner programmers for the last five months (longer if you count the folks I wasn&#8217;t getting paid to help), and there are a few things that come up over and over.</p>\n<p>Here are the tips I give beginners:</p>\n<h2>1. See above</h2>\n<p>That thing I said about making mistakes and it being okay?</p>\n<p>That&#8217;s tip #1.</p>\n<h2>2. Run it early &amp; often</h2>\n<p>It&#8217;s a very good idea to test tiny bits of code as you write it &#8211; it&#8217;s a trick that beginners often don&#8217;t use but experts rely on.</p>\n<p>Make sure you run the code after every tiny change, as opposed to making 2+ changes and then running it. With the former, you know exactly the effect of the change, with the latter it becomes unclear what effects (or bugs) each change had on the program.</p>\n<p>See my post about the importance of being <a title=\"That Key Thing They Don’t Teach Beginning Programmers\" href=\"http://helveticajessica.com/key-thing-dont-teach-beginning-programmers/\">methodical</a>.</p>\n<h2>3. Just try it</h2>\n<p>Related to tip 2.</p>\n<p>Often the best approach to simply try out a theory and then see what happens. Talking or wondering about it doesn&#8217;t give you any extra data points to use in making a decision.</p>\n<p>Sometimes something seems &#8220;too easy.&#8221; Don&#8217;t psych yourself out, just try the seemingly-easy way and see if it works or not.</p>\n<h2>3. Google is your friend</h2>\n<p>For some reason, I see a lot of beginners say something like, &#8220;I really wanted to try to do this without using any resources.&#8221; I appreciate your pluck, kid, but <strong>people with 20 years of experience google things and look up documentation every day</strong>.</p>\n<p>I suspect this attitude is a kind of legacy of our educational system. No cheating..?</p>\n<p>Not only does documentation only exist for the sake of being used by people who don&#8217;t already have the answer (a fact sometimes forgotten by the writers of the documentation), but as long as you actually understand why a bit of code works, there&#8217;s not really much point to reinventing the wheel or floundering for no reason. No one programs using punch cards anymore, &#8217;cause we&#8217;ve got other problems to solve.</p>\n<p>As an example, I&#8217;m pretty sure that on StackOverflow, someone has asked every possible question about basic CSS stuff. A Google search will get that answer in front of you, fast.</p>\n<p>Caveat: don&#8217;t just copy/paste stuff you don&#8217;t understand. After all, it <strong>is</strong> possible to delete everything from your computer with one little line of code.</p>\n<h2>4. Make cheatsheets</h2>\n<p>Creating a cheatsheet can be super useful. This is especially important if you&#8217;re learning more than one language at once because they will start to run together in your head.</p>\n<p>Personally, when I&#8217;m learning something new I make a Note (comes with Macs &#8211; gotta love that search feature) for each language, framework, whatever, as a quick reference for little syntax things that I always forget. I also like to include links to the actually-helpful resources I find along the way.</p>\n<h2>5. Make it easy</h2>\n<p>Some beginners have the impulse to make it easier on themselves and sometimes other beginners find that annoying. But this is absolutely the right approach to take.</p>\n<p>Stuff like being explicit with your variable names takes extra time, <em>and it&#8217;s worth every second</em>.</p>\n<h2>6. Make sure you read and understand the instructions</h2>\n<p>Wait, I thought this post was only 5 tips?</p>\n<p>Exactly.</p>\n<p>And then, when you think you&#8217;re done, double check before you move on. This is not only important for something like a homework assignment but also for meeting requirements out in the real world.</p>\n<p>Hell, it&#8217;s good advice no matter what you&#8217;re doing.</p>\n","date":"April 09, 2015","categories":[{"name":"ones and zeros","slug":"ones-and-zeros"}],"tags":null,"author":{"name":"jessica","slug":"jessica"}}},"pageContext":{"id":"d0e64748-5bd6-5201-935e-eea31e239f45"}}