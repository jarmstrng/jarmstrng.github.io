{"data":{"wordpressPost":{"id":"8b7ea332-0674-5442-a613-b65e91fe9ff2","title":"That Key Thing They Don’t Teach Beginning Programmers","slug":"key-thing-dont-teach-beginning-programmers","content":"<p><em>Disclaimer: I have taken a limited number of &#8220;intro programming&#8221; classes, being but a single person, though I have had my impression confirmed by others. If you teach/have taken a course that includes my &#8220;missing fundamental,&#8221; promote that excellentness in the comments at the bottom!</em></p>\n<h2>The #1 Most Fundamental Thing</h2>\n<p>I came to coding from a very, very liberal arts background. In fact, my Bachelor&#8217;s was through the Interdisciplinary program at my school. I literally made it up. A little bit from this major, a little bit from that (1).</p>\n<p>The whole point was to connect different ideas from multiple disciplines into a cohesive, well-rounded course of study. Like making a piece of art, I took inspiration from multiple sources and moulded them into something new based on <strong>how it felt</strong>.</p>\n<p>Programming doesn&#8217;t work like that.</p>\n<p>Actually, code is pretty much the opposite of, for example, a collage, where you just kinda move bits of paper around until they <strong>feel</strong> right (2). That doesn&#8217;t fly in programming, unless maybe your goal is to see how many error messages you can get.</p>\n<h5>So what&#8217;s the most fundamental truth about coding that no one is explicitly teaching?</h5>\n<p><strong>How to be methodical</strong>. Or, how important that is.</p>\n<p>This, I believe, is a serious flaw in most curricula. I can scientifically confirm, based on a sample size of one, that some people have never needed to be methodical in the way that a programmer needs to be methodical, and therefore have not spent much time building that skill.</p>\n<p>Explicitly teaching a systematic approach to beginner programmers should have a big impact on learning for only a little investment in teaching time.</p>\n<h3>A World of Pain</h3>\n<p>I don&#8217;t need to tell experienced programmers why being methodical is important. You all can skip this section if you like.</p>\n<p>To a beginner, though, lacking that understanding might be holding them back from success, or at least be a huge source of frustration. It was for me.</p>\n<p>I started my very first online programming course in the fall of 2012. I dropped out of that course as well. Besides the really bad fit between me and the course (3), it didn&#8217;t articulate any fundamental paradigms in how programmers need to think about and approach problem-solving (4).</p>\n<p>I remember trying to debug a simple program I&#8217;d written, with my (senior engineer) mentor watching over my shoulder. I had zero idea what mistakes in syntax or logic I&#8217;d made, so I changed a couple things based on vague hunches that maybe I needed to change this or rearrange that, then tried to run it again.</p>\n<p><em>&#8220;No no, you need to be more systematic in your debugging.&#8221;</em></p>\n<p>This is the kind of advice that experts give. Totally true and potentially very useful, if you can figure out what the hell they&#8217;re talking about.</p>\n<p><em>&#8220;What..? What? We don&#8217;t cover debugging until next week&#8230;&#8221;</em></p>\n<p>As stated earlier, I didn&#8217;t make it through that class. For multiple reasons, I felt dumb and frustrated and incapable (it didn&#8217;t help that I wasn&#8217;t used to <a title=\"You Don’t Suck at Programming; Programming Sucks\" href=\"http://helveticajessica.com/dont-suck-programming-programming-sucks/\">failing so frequently</a>.) And so, while I had previously enjoyed working through <a title=\"Totally Awesome\" href=\"http://learnpythonthehardway.org/book/\" target=\"_blank\">Learn Python the Hard Way</a> (so good!), programming was no longer fun for me and I didn&#8217;t want to do it anymore.</p>\n<p>Perhaps the worst result of this experience was that I thought I couldn&#8217;t be a programmer.</p>\n<p>(The mentor, to his credit, totally disagreed with me on this last point. But his assurances of the potential he&#8217;d seen in me were no match for my frustration.)</p>\n<h2 style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333;\">The Incredible Lightness of Systemization</h2>\n<p>A methodical approach takes a potentially painful exercise in problem-solving-failure and turns it into a fun, accessible puzzle.</p>\n<p>A demonstration may be the best way to explain the process that I&#8217;ve adopted for my little scripts.</p>\n<p>The following assignment comes from <a href=\"https://www.coursera.org/course/pythonlearn\" target=\"_blank\">Programming for Everybody</a> (don&#8217;t worry I won&#8217;t give away the answer):</p>\n<blockquote><p>Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:</p>\n<pre>X-DSPAM-Confidence:    0.8475</pre>\n<p>Count these lines and extract the floating point values from each of the lines and coput the average of those values and produce an output as shown below.</p></blockquote>\n<p>Ignoring the typo and potential for confusion there, this problem was the most complex assignment of the course up to that point. Potential for hyperventilation: High.</p>\n<p>So what did I do? I broke it down into little chunks:</p>\n<ol>\n<li>prompts for a file name,</li>\n<li>then opens that file and</li>\n<li>reads through the file,</li>\n<li>looking for lines of the form: X-DSPAM-Confidence:    0.8475</li>\n<li>Count these lines and</li>\n<li>extract the floating point values from each of the lines and</li>\n<li>compute the average of those values and</li>\n<li>produce an output as shown below.</li>\n</ol>\n<p>To my surprise (and disappointment), they gave us a head start. But the approach I was planning to take was:</p>\n<p>Write just enough code to prompt for a file name, and then use a print statement to confirm that I had successfully completed that first tiny step.</p>\n<p>Then, add the next smallest possible amount of functionality and use a print statement to confirm it worked.</p>\n<p>Rinse and repeat.</p>\n<h3>Building Upon Success</h3>\n<p>Using this systematic approach of completing tiny bite-size pieces and <strong>confirming they work before moving on to the next piece</strong>, you know that a certain amount of your script is (probably) bug-free, and when you do get an error message there&#8217;s a decent chance it came from whatever little bit you just added. This makes debugging SO. MUCH. EASIER.</p>\n<p>Previously, one of my biggest frustrations had been the fear that I had more than one bug in a script, so if I made one change I wouldn&#8217;t know if it helped or not because the other one was still there mucking things up.</p>\n<p>Another example of being systematic: <strong>when you&#8217;re debugging, only make one change at a time</strong>. That&#8217;s what my mentor was trying to tell me during my first attempt at learning to program. Now you know exactly what effect each change has on the program.</p>\n<p>Simple? Simple. You just have to <em>know you need to work this way</em>.</p>\n<h3>A Terrible Story</h3>\n<p>One of my favorite extracurricular activities in college was rock climbing. One day, my instructor told me the story of how the people teaching climbing classes used to fall off of cliffs at an alarming frequency. Falling off a cliff is bad bad bad, and many people were seriously injured or killed this way.</p>\n<p>So what one simple thing completely ended this unfortunate trend?</p>\n<p>They started telling instructors: hey, lots of teachers are accidentally backing off of cliffs while explaining something to their students.</p>\n<p>Done. Someone tells you that, and then from that point on you will <em>always</em> tie yourself to something before you turn your back to the edge of a cliff.</p>\n<p>Awareness of the problem was enough to end the problem entirely.</p>\n<p>&nbsp;</p>\n<p style=\"text-align: center;\">* * * * *</p>\n<p>&nbsp;</p>\n<p>(1) This was, of course, back in the day when a respectable private university might only cost $22k per year. Nowadays it seems you can&#8217;t even consider a degree unless it will guarantee a well-paying job when you graduate. My heart goes out to those 18 year olds who have to pick a career before they even know what they like to do.</p>\n<p>(2) I have been told that senior developers sometimes make choices based on the weather: &#8220;So why did you do it that way?&#8221; &#8220;Oh, I don&#8217;t know, because it&#8217;s beautiful outside and I was feeling spunky.&#8221; &#8230;Maybe. But I stand by my premise. &#8220;I think this function would look fabulous with a semi-colon&#8230; <em>there</em>.&#8221; No. Just &#8211; no.</p>\n<p>(3) MITx assumes its students have recently taken advanced high school math classes, and that is true of all MIT freshmen. Retraining my brain to think like a programmer via math I haven&#8217;t seen or thought of in 15 years, just wasn&#8217;t going to end in happy fun times. Sorry MIT, you&#8217;re still an amazing school, but you and I just weren&#8217;t meant to be.</p>\n<p>(4) Nor did it spend much time on the many common stumbling points for beginners. I loved <a href=\"https://www.coursera.org/course/pythonlearn\" target=\"_blank\">Coursera&#8217;s Programming for Everybody</a> because the professor takes extra time to cover them. Sometimes too much time, but it&#8217;s not his fault I&#8217;d already learned a lot of the material.</p>\n","date":"May 30, 2014","categories":[{"name":"ones and zeros","slug":"ones-and-zeros"}],"tags":null,"author":{"name":"jessica","slug":"jessica"}}},"pageContext":{"id":"8b7ea332-0674-5442-a613-b65e91fe9ff2"}}